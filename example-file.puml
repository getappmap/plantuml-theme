@startuml
' this beta feature (adding classes to participants) doesn't seem to work too well, it prints the classname as a label
' so for now the participant boxes need to have colors declared inline
' skinparam useBetaStyle true
' <style>
'     sequenceDiagram {
'       .HTTP_server_requests {
'         BackgroundColor #ff00ff
'       }
'        .controllers {
'          BackgroundColor #ff00ff
'        }
'     }
' </style>

!includeurl https://raw.githubusercontent.com/getappmap/plantuml-theme/main/appmap-theme.puml

' participant HTTP_server_requests as "HTTP server requests" <<HTTP_server_requests>>
' participant controllers as "controllers" <<controllers>>
' participant models as "models" #445db1 <<models>>
' participant views as "views" #445db1 <<views>>
' participant Database as "Database" #9a12ba <<Database>>

'the following have hard-coded backgroundcolors
participant HTTP_server_requests as "HTTP server requests" #541a68
participant controllers as "controllers" #445db1
participant models as "models" #445db1
participant views as "views" #445db1
participant Database as "Database" #9a12ba
  [->Database: begin transaction
  [->Database: SELECT "users".* FROM "users" WHERE "users"."id" =
  Note right
SELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?
  End note
  [->Database: SELECT "users".* FROM "users" WHERE "users"."id" =
  Note right
SELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?
  End note
  [->HTTP_server_requests: POST /login
  activate HTTP_server_requests
    HTTP_server_requests->controllers: create
    activate controllers
      controllers->Database: SELECT "users".* FROM "users" WHERE "users"."email
      Note right
SELECT "users".* FROM "users" WHERE "users"."email" = ? LIMIT ?
      End note
      controllers->models: remember
      activate models
        models->models: <u>new_remember_token</u>
        activate models
        models<--models: string
        deactivate models
        models->models: <u>digest</u>
        activate models
        models<--models: BCrypt::Password
        deactivate models
        models->Database: SAVEPOINT active_record_1
        models->Database: UPDATE "users" SET "remember_digest" = ?, "updated
        Note right
UPDATE "users" SET "remember_digest" = ?, "updated_at" = ? WHERE "users"."id" =
?
        End note
        models->Database: RELEASE SAVEPOINT active_record_1
      controllers<--models: boolean
      deactivate models
    HTTP_server_requests<--controllers: string
    deactivate controllers
  [<--HTTP_server_requests: 302
  deactivate HTTP_server_requests
  [->HTTP_server_requests: GET /users/{id}/following
  activate HTTP_server_requests
    HTTP_server_requests->Database: SELECT "users".* FROM "users" WHERE "users"."id" =
    Note right
SELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?
    End note
    HTTP_server_requests->controllers: following
    activate controllers
      controllers->Database: SELECT "users".* FROM "users" WHERE "users"."id" =
      Note right
SELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?
      End note
      controllers->controllers: page_number
      activate controllers
      controllers<--controllers: integer
      deactivate controllers
      controllers->views: <u>render</u>
        views->Database: SELECT COUNT(*) FROM "microposts" WHERE "micropost
        Note right
SELECT COUNT(*) FROM "microposts" WHERE "microposts"."user_id" = ?
        End note
        views->views: <u>render</u>
          views->Database: SELECT COUNT(*) FROM "users" INNER JOIN "relations
          Note right
SELECT COUNT(*) FROM "users" INNER JOIN "relationships" ON "users"."id" =
"relationships"."followed_id" WHERE "relationships"."follower_id" = ?
          End note
          views->Database: SELECT COUNT(*) FROM "users" INNER JOIN "relations
          Note right
SELECT COUNT(*) FROM "users" INNER JOIN "relationships" ON "users"."id" =
"relationships"."follower_id" WHERE "relationships"."followed_id" = ?
          End note
        views->Database: SELECT COUNT(*) FROM "users" INNER JOIN "relations
        Note right
SELECT COUNT(*) FROM "users" INNER JOIN "relationships" ON "users"."id" =
"relationships"."followed_id" WHERE "relationships"."follower_id" = ?
        End note
        views->Database: SELECT "users".* FROM "users" INNER JOIN "relation
        Note right
SELECT "users".* FROM "users" INNER JOIN "relationships" ON "users"."id" =
"relationships"."followed_id" WHERE "relationships"."follower_id" = ? LIMIT ?
OFFSET ?
        End note
        views->views: <u>render</u>
        views->views: <u>render</u>
        views->views: <u>render</u>
        views->views: <u>render</u>
    HTTP_server_requests<--controllers: ActionView::OutputBuffer
    deactivate controllers
  [<--HTTP_server_requests: 200
  deactivate HTTP_server_requests
  [->Database: SELECT 1 AS one FROM "users" INNER JOIN "relations
  Note right
SELECT 1 AS one FROM "users" INNER JOIN "relationships" ON "users"."id" =
"relationships"."followed_id" WHERE "relationships"."follower_id" = ? LIMIT ?
  End note
  [->Database: SELECT COUNT(*) FROM "users" INNER JOIN "relations
  Note right
SELECT COUNT(*) FROM "users" INNER JOIN "relationships" ON "users"."id" =
"relationships"."followed_id" WHERE "relationships"."follower_id" = ?
  End note
  [->Database: SELECT "users".* FROM "users" INNER JOIN "relation
  Note right
SELECT "users".* FROM "users" INNER JOIN "relationships" ON "users"."id" =
"relationships"."followed_id" WHERE "relationships"."follower_id" = ?
  End note
  [->Database: rollback transaction
@enduml